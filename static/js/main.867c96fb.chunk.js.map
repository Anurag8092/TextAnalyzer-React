{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","navItem","value","onClick","changeColor","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","heading","onChange","event","target","style","backgroundColor","rows","toLowerCase","UpText","toUpperCase","LoText","document","getElementById","select","navigator","clipboard","writeText","showAlert","newText","split","join","length","Alert","alert","class","role","word","str","charAt","slice","cap","message","App","setMode","setAlert","setTimeout","body","custColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.867c96fb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n  <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">Text Analyzer</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.navItem}</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n  \r\n\r\n  {/* Set cutom Bg Color */}\r\n  <input type=\"color\" className=\"\" id=\"customColorSelector\" />   \r\n  <input type=\"button\" className=\" btn mx-3\" id=\"setBgColor\" value=\"Set Background Color\" onClick={props.changeColor} /> \r\n\r\n{/* Dark/Light Mode */}\r\n  <div className={`form-check form-switch text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick = {props.toggleMode} />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle {props.mode === \"dark\" ? \"Light\" : \"Dark\"} Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    navItem: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    navItem: \"Set navbar title h ere\"\r\n}","import React, { useState } from 'react'\r\n\r\n\r\n\r\nfunction TextForm(props) {\r\n    const handleClear = () => {\r\n        setText(\"\");\r\n      }\r\n    \r\n    const handleChange = () => {\r\n      if(text === text.toLowerCase())\r\n      {\r\n          let UpText = text.toUpperCase();\r\n          setText(UpText);\r\n    }else{\r\n        let LoText = text.toLowerCase();\r\n        setText(LoText);\r\n    }\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"textbox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to ClipBoard!\", \"success\");\r\n    }\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    } \r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const reg = /[.!?]/;\r\n    \r\n    return (\r\n        <>\r\n        <div className={`container text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}>\r\n        <h1>{props.heading}:</h1>\r\n    <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={ { backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\" } } id=\"textbox\" rows=\"8\"/>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={handleClear} >Clear</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleChange} >Change Case</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopy} >Copy</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace} >Remove Extra Spaces</button>\r\n\r\n        </div>\r\n      <div className={`container my-3 text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}>\r\n          <h3>Your Text Summary:</h3>\r\n          <p>{text.split(\" \").length} words, {text.length} characters, {text.split(reg).length - 1} sentences</p>\r\n          {/* <p>{0.008 * text.split(\" \").length} minutes to read!</p> */}\r\n          <h3>Preview:</h3>\r\n          <p>{text}</p>\r\n      </div>\r\n      \r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const cap = (word) => {\r\n        const str = word.toLowerCase();\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n\r\n    return (\r\n            props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{cap(props.alert.type)}</strong>: {props.alert.message}\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n  })\n  setTimeout(() => {\n    setAlert(null)\n  }, 1500);\n  }\n  const toggleMode = () => {\n    if(mode === \"light\"){\n    setMode(\"dark\");\n    document.body.style.backgroundColor = \"grey\";\n    showAlert(\"Dark Mode has been enables\", \"success\");\n  }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enables\", \"success\");\n    };\n  }\n\n  const changeColor = () => {\n    let custColor = document.getElementById(\"customColorSelector\").value;\n    document.body.style.backgroundColor = custColor;\n  }\n  \n  return (\n   <>\n  {/* <Router> */}\n< Navbar navItem = \"Home\" mode={mode} toggleMode={toggleMode} changeColor={changeColor} />\n\n< Alert alert={alert} /> \n\n<div className=\"container my-3\">\n\n\n{/* <Switch> */}\n\n  {/* exact is required because React does partial matching instead if full matching...in order to do full matching exact is used */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          < TextForm heading = \"Enter Text\" mode={mode}  showAlert={showAlert}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n\n        </div>\n{/* </Router> */}\n\n\n\n\n   \n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}